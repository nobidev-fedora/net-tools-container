diff -up net-tools-1.60/statistics.c.doubleword net-tools-1.60/statistics.c
--- net-tools-1.60/statistics.c.doubleword	2010-08-10 15:20:11.000000000 +0200
+++ net-tools-1.60/statistics.c	2010-08-10 15:21:24.000000000 +0200
@@ -63,54 +63,54 @@ static enum State state;
 struct entry Iptab[] =
 {
     {"Forwarding", N_("Forwarding is %s"), i_forward | I_STATIC},
-    {"DefaultTTL", N_("Default TTL is %lu"), number | I_STATIC},
-    {"InReceives", N_("%lu total packets received"), number},
-    {"InHdrErrors", N_("%lu with invalid headers"), opt_number},
-    {"InAddrErrors", N_("%lu with invalid addresses"), opt_number},
-    {"ForwDatagrams", N_("%lu forwarded"), number},
-    {"InUnknownProtos", N_("%lu with unknown protocol"), opt_number},
-    {"InDiscards", N_("%lu incoming packets discarded"), number},
-    {"InDelivers", N_("%lu incoming packets delivered"), number},
-    {"OutRequests", N_("%lu requests sent out"), number},	/*? */
-    {"OutDiscards", N_("%lu outgoing packets dropped"), opt_number},
-    {"OutNoRoutes", N_("%lu dropped because of missing route"), opt_number},
-    {"ReasmTimeout", N_("%lu fragments dropped after timeout"), opt_number},
-    {"ReasmReqds", N_("%lu reassemblies required"), opt_number},	/* ? */
-    {"ReasmOKs", N_("%lu packets reassembled ok"), opt_number},
-    {"ReasmFails", N_("%lu packet reassembles failed"), opt_number},
-    {"FragOKs", N_("%lu fragments received ok"), opt_number},
-    {"FragFails", N_("%lu fragments failed"), opt_number},
-    {"FragCreates", N_("%lu fragments created"), opt_number}
+    {"DefaultTTL", N_("Default TTL is %llu"), number | I_STATIC},
+    {"InReceives", N_("%llu total packets received"), number},
+    {"InHdrErrors", N_("%llu with invalid headers"), opt_number},
+    {"InAddrErrors", N_("%llu with invalid addresses"), opt_number},
+    {"ForwDatagrams", N_("%llu forwarded"), number},
+    {"InUnknownProtos", N_("%llu with unknown protocol"), opt_number},
+    {"InDiscards", N_("%llu incoming packets discarded"), number},
+    {"InDelivers", N_("%llu incoming packets delivered"), number},
+    {"OutRequests", N_("%llu requests sent out"), number},	/*? */
+    {"OutDiscards", N_("%llu outgoing packets dropped"), opt_number},
+    {"OutNoRoutes", N_("%llu dropped because of missing route"), opt_number},
+    {"ReasmTimeout", N_("%llu fragments dropped after timeout"), opt_number},
+    {"ReasmReqds", N_("%llu reassemblies required"), opt_number},	/* ? */
+    {"ReasmOKs", N_("%llu packets reassembled ok"), opt_number},
+    {"ReasmFails", N_("%llu packet reassembles failed"), opt_number},
+    {"FragOKs", N_("%llu fragments received ok"), opt_number},
+    {"FragFails", N_("%llu fragments failed"), opt_number},
+    {"FragCreates", N_("%llu fragments created"), opt_number}
 };
 
 struct entry Icmptab[] =
 {
-    {"InMsgs", N_("%lu ICMP messages received"), number},
-    {"InErrors", N_("%lu input ICMP message failed."), number},
-    {"InDestUnreachs", N_("destination unreachable: %lu"), i_inp_icmp | I_TITLE},
-    {"InTimeExcds", N_("timeout in transit: %lu"), i_inp_icmp | I_TITLE},
-    {"InParmProbs", N_("wrong parameters: %lu"), i_inp_icmp | I_TITLE},	/*? */
-    {"InSrcQuenchs", N_("source quenches: %lu"), i_inp_icmp | I_TITLE},
-    {"InRedirects", N_("redirects: %lu"), i_inp_icmp | I_TITLE},
-    {"InEchos", N_("echo requests: %lu"), i_inp_icmp | I_TITLE},
-    {"InEchoReps", N_("echo replies: %lu"), i_inp_icmp | I_TITLE},
-    {"InTimestamps", N_("timestamp request: %lu"), i_inp_icmp | I_TITLE},
-    {"InTimestampReps", N_("timestamp reply: %lu"), i_inp_icmp | I_TITLE},
-    {"InAddrMasks", N_("address mask request: %lu"), i_inp_icmp | I_TITLE},	/*? */
-    {"InAddrMaskReps", N_("address mask replies: %lu"), i_inp_icmp | I_TITLE},	/*? */
-    {"OutMsgs", N_("%lu ICMP messages sent"), number},
-    {"OutErrors", N_("%lu ICMP messages failed"), number},
-    {"OutDestUnreachs", N_("destination unreachable: %lu"), i_outp_icmp | I_TITLE},
-    {"OutTimeExcds", N_("time exceeded: %lu"), i_outp_icmp | I_TITLE},
-    {"OutParmProbs", N_("wrong parameters: %lu"), i_outp_icmp | I_TITLE},	/*? */
-    {"OutSrcQuenchs", N_("source quench: %lu"), i_outp_icmp | I_TITLE},
-    {"OutRedirects", N_("redirect: %lu"), i_outp_icmp | I_TITLE},
-    {"OutEchos", N_("echo request: %lu"), i_outp_icmp | I_TITLE},
-    {"OutEchoReps", N_("echo replies: %lu"), i_outp_icmp | I_TITLE},
-    {"OutTimestamps", N_("timestamp requests: %lu"), i_outp_icmp | I_TITLE},
-    {"OutTimestampReps", N_("timestamp replies: %lu"), i_outp_icmp | I_TITLE},
-    {"OutAddrMasks", N_("address mask requests: %lu"), i_outp_icmp | I_TITLE},
-    {"OutAddrMaskReps", N_("address mask replies: %lu"), i_outp_icmp | I_TITLE},
+    {"InMsgs", N_("%llu ICMP messages received"), number},
+    {"InErrors", N_("%llu input ICMP message failed."), number},
+    {"InDestUnreachs", N_("destination unreachable: %llu"), i_inp_icmp | I_TITLE},
+    {"InTimeExcds", N_("timeout in transit: %llu"), i_inp_icmp | I_TITLE},
+    {"InParmProbs", N_("wrong parameters: %llu"), i_inp_icmp | I_TITLE},	/*? */
+    {"InSrcQuenchs", N_("source quenches: %llu"), i_inp_icmp | I_TITLE},
+    {"InRedirects", N_("redirects: %llu"), i_inp_icmp | I_TITLE},
+    {"InEchos", N_("echo requests: %llu"), i_inp_icmp | I_TITLE},
+    {"InEchoReps", N_("echo replies: %llu"), i_inp_icmp | I_TITLE},
+    {"InTimestamps", N_("timestamp request: %llu"), i_inp_icmp | I_TITLE},
+    {"InTimestampReps", N_("timestamp reply: %llu"), i_inp_icmp | I_TITLE},
+    {"InAddrMasks", N_("address mask request: %llu"), i_inp_icmp | I_TITLE},	/*? */
+    {"InAddrMaskReps", N_("address mask replies: %llu"), i_inp_icmp | I_TITLE},	/*? */
+    {"OutMsgs", N_("%llu ICMP messages sent"), number},
+    {"OutErrors", N_("%llu ICMP messages failed"), number},
+    {"OutDestUnreachs", N_("destination unreachable: %llu"), i_outp_icmp | I_TITLE},
+    {"OutTimeExcds", N_("time exceeded: %llu"), i_outp_icmp | I_TITLE},
+    {"OutParmProbs", N_("wrong parameters: %llu"), i_outp_icmp | I_TITLE},	/*? */
+    {"OutSrcQuenchs", N_("source quench: %llu"), i_outp_icmp | I_TITLE},
+    {"OutRedirects", N_("redirect: %llu"), i_outp_icmp | I_TITLE},
+    {"OutEchos", N_("echo request: %llu"), i_outp_icmp | I_TITLE},
+    {"OutEchoReps", N_("echo replies: %llu"), i_outp_icmp | I_TITLE},
+    {"OutTimestamps", N_("timestamp requests: %llu"), i_outp_icmp | I_TITLE},
+    {"OutTimestampReps", N_("timestamp replies: %llu"), i_outp_icmp | I_TITLE},
+    {"OutAddrMasks", N_("address mask requests: %llu"), i_outp_icmp | I_TITLE},
+    {"OutAddrMaskReps", N_("address mask replies: %llu"), i_outp_icmp | I_TITLE},
 };
 
 struct entry Tcptab[] =
@@ -119,131 +119,131 @@ struct entry Tcptab[] =
     {"RtoMin", "", number},
     {"RtoMax", "", number},
     {"MaxConn", "", number},
-    {"ActiveOpens", N_("%lu active connections openings"), number},
-    {"PassiveOpens", N_("%lu passive connection openings"), number},
-    {"AttemptFails", N_("%lu failed connection attempts"), number},
-    {"EstabResets", N_("%lu connection resets received"), number},
-    {"CurrEstab", N_("%lu connections established"), number},
-    {"InSegs", N_("%lu segments received"), number},
-    {"OutSegs", N_("%lu segments send out"), number},
-    {"RetransSegs", N_("%lu segments retransmited"), number},
-    {"InErrs", N_("%lu bad segments received."), number},
-    {"OutRsts", N_("%lu resets sent"), number},
+    {"ActiveOpens", N_("%llu active connections openings"), number},
+    {"PassiveOpens", N_("%llu passive connection openings"), number},
+    {"AttemptFails", N_("%llu failed connection attempts"), number},
+    {"EstabResets", N_("%llu connection resets received"), number},
+    {"CurrEstab", N_("%llu connections established"), number},
+    {"InSegs", N_("%llu segments received"), number},
+    {"OutSegs", N_("%llu segments send out"), number},
+    {"RetransSegs", N_("%llu segments retransmited"), number},
+    {"InErrs", N_("%llu bad segments received."), number},
+    {"OutRsts", N_("%llu resets sent"), number},
 };
 
 struct entry Udptab[] =
 {
-    {"InDatagrams", N_("%lu packets received"), number},
-    {"NoPorts", N_("%lu packets to unknown port received."), number},
-    {"InErrors", N_("%lu packet receive errors"), number},
-    {"OutDatagrams", N_("%lu packets sent"), number},
+    {"InDatagrams", N_("%llu packets received"), number},
+    {"NoPorts", N_("%llu packets to unknown port received."), number},
+    {"InErrors", N_("%llu packet receive errors"), number},
+    {"OutDatagrams", N_("%llu packets sent"), number},
 };
 
 struct entry Tcpexttab[] =
 {
-    {"SyncookiesSent", N_("%lu SYN cookies sent"), opt_number},
-    {"SyncookiesRecv", N_("%lu SYN cookies received"), opt_number},
-    {"SyncookiesFailed", N_("%lu invalid SYN cookies received"), opt_number},
+    {"SyncookiesSent", N_("%llu SYN cookies sent"), opt_number},
+    {"SyncookiesRecv", N_("%llu SYN cookies received"), opt_number},
+    {"SyncookiesFailed", N_("%llu invalid SYN cookies received"), opt_number},
 
-    { "EmbryonicRsts", N_("%lu resets received for embryonic SYN_RECV sockets"),
+    { "EmbryonicRsts", N_("%llu resets received for embryonic SYN_RECV sockets"),
       opt_number },  
-    { "PruneCalled", N_("%lu packets pruned from receive queue because of socket"
+    { "PruneCalled", N_("%llu packets pruned from receive queue because of socket"
 			" buffer overrun"), opt_number },  
     /* obsolete: 2.2.0 doesn't do that anymore */
-    { "RcvPruned", N_("%lu packets pruned from receive queue"), opt_number },
-    { "OfoPruned", N_("%lu packets dropped from out-of-order queue because of"
+    { "RcvPruned", N_("%llu packets pruned from receive queue"), opt_number },
+    { "OfoPruned", N_("%llu packets dropped from out-of-order queue because of"
 		      " socket buffer overrun"), opt_number }, 
-    { "OutOfWindowIcmps", N_("%lu ICMP packets dropped because they were "
+    { "OutOfWindowIcmps", N_("%llu ICMP packets dropped because they were "
 			     "out-of-window"), opt_number }, 
-    { "LockDroppedIcmps", N_("%lu ICMP packets dropped because"
+    { "LockDroppedIcmps", N_("%llu ICMP packets dropped because"
 			     " socket was locked"), opt_number },
-    { "TW", N_("%lu TCP sockets finished time wait in fast timer"), opt_number },
-    { "TWRecycled", N_("%lu time wait sockets recycled by time stamp"), opt_number }, 
-    { "TWKilled", N_("%lu TCP sockets finished time wait in slow timer"), opt_number },
-    { "PAWSPassive", N_("%lu passive connections rejected because of"
+    { "TW", N_("%llu TCP sockets finished time wait in fast timer"), opt_number },
+    { "TWRecycled", N_("%llu time wait sockets recycled by time stamp"), opt_number },
+    { "TWKilled", N_("%llu TCP sockets finished time wait in slow timer"), opt_number },
+    { "PAWSPassive", N_("%llu passive connections rejected because of"
 			" time stamp"), opt_number },
-    { "PAWSActive", N_("%lu active connections rejected because of "
+    { "PAWSActive", N_("%llu active connections rejected because of "
 		       "time stamp"), opt_number },
-    { "PAWSEstab", N_("%lu packets rejects in established connections because of"
+    { "PAWSEstab", N_("%llu packets rejects in established connections because of"
 		      " timestamp"), opt_number },
-    { "DelayedACKs", N_("%lu delayed acks sent"), opt_number },
-    { "DelayedACKLocked", N_("%lu delayed acks further delayed because of"
+    { "DelayedACKs", N_("%llu delayed acks sent"), opt_number },
+    { "DelayedACKLocked", N_("%llu delayed acks further delayed because of"
 			     " locked socket"), opt_number },
-    { "DelayedACKLost", N_("Quick ack mode was activated %lu times"), opt_number },
-    { "ListenOverflows", N_("%lu times the listen queue of a socket overflowed"),
+    { "DelayedACKLost", N_("Quick ack mode was activated %llu times"), opt_number },
+    { "ListenOverflows", N_("%llu times the listen queue of a socket overflowed"),
       opt_number },
-    { "ListenDrops", N_("%lu SYNs to LISTEN sockets ignored"), opt_number },
-    { "TCPPrequeued", N_("%lu packets directly queued to recvmsg prequeue."), 
+    { "ListenDrops", N_("%llu SYNs to LISTEN sockets ignored"), opt_number },
+    { "TCPPrequeued", N_("%llu packets directly queued to recvmsg prequeue."),
       opt_number },
-    { "TCPDirectCopyFromBacklog", N_("%lu packets directly received"
+    { "TCPDirectCopyFromBacklog", N_("%llu packets directly received"
 				     " from backlog"), opt_number },
-    { "TCPDirectCopyFromPrequeue", N_("%lu packets directly received"
+    { "TCPDirectCopyFromPrequeue", N_("%llu packets directly received"
 				      " from prequeue"), opt_number },
-    { "TCPPrequeueDropped", N_("%lu packets dropped from prequeue"), opt_number },
-    { "TCPHPHits", N_("%lu packets header predicted"), number },
-    { "TCPHPHitsToUser", N_("%lu packets header predicted and "
+    { "TCPPrequeueDropped", N_("%llu packets dropped from prequeue"), opt_number },
+    { "TCPHPHits", N_("%llu packets header predicted"), number },
+    { "TCPHPHitsToUser", N_("%llu packets header predicted and "
 			    "directly queued to user"), opt_number },
-    { "SockMallocOOM", N_("Ran %lu times out of system memory during " 
+    { "SockMallocOOM", N_("Ran %llu times out of system memory during "
 			  "packet sending"), opt_number }, 
-     { "TCPPureAcks", N_("%u acknowledgments not containing data received"), opt_number },
-     { "TCPHPAcks", N_("%u predicted acknowledgments"), opt_number },
-     { "TCPRenoRecovery", N_("%u times recovered from packet loss due to fast retransmit"), opt_number },
-     { "TCPSackRecovery", N_("%u times recovered from packet loss due to SACK data"), opt_number },
-     { "TCPSACKReneging", N_("%u bad SACKs received"), opt_number },
-     { "TCPFACKReorder", N_("Detected reordering %u times using FACK"), opt_number },
-     { "TCPSACKReorder", N_("Detected reordering %u times using SACK"), opt_number },
-     { "TCPTSReorder", N_("Detected reordering %u times using time stamp"), opt_number },
-     { "TCPRenoReorder", N_("Detected reordering %u times using reno fast retransmit"), opt_number },
-     { "TCPFullUndo", N_("%u congestion windows fully recovered"), opt_number }, 
-     { "TCPPartialUndo", N_("%u congestion windows partially recovered using Hoe heuristic"), opt_number },
-     { "TCPDSackUndo", N_("%u congestion window recovered using DSACK"), opt_number },
-     { "TCPLossUndo", N_("%u congestion windows recovered after partial ack"), opt_number },
-     { "TCPLostRetransmits", N_("%u retransmits lost"), opt_number },
-     { "TCPRenoFailures",  N_("%u timeouts after reno fast retransmit"), opt_number },
-     { "TCPSackFailures",  N_("%u timeouts after SACK recovery"), opt_number },
-     { "TCPLossFailures",  N_("%u timeouts in loss state"), opt_number },
-     { "TCPFastRetrans", N_("%u fast retransmits"), opt_number },
-     { "TCPForwardRetrans", N_("%u forward retransmits"), opt_number }, 
-     { "TCPSlowStartRetrans", N_("%u retransmits in slow start"), opt_number },
-     { "TCPTimeouts", N_("%u other TCP timeouts"), opt_number },
-     { "TCPRenoRecoveryFailed", N_("%u reno fast retransmits failed"), opt_number },
-     { "TCPSackRecoveryFail", N_("%u sack retransmits failed"), opt_number },
-     { "TCPSchedulerFailed", N_("%u times receiver scheduled too late for direct processing"), opt_number },
-     { "TCPRcvCollapsed", N_("%u packets collapsed in receive queue due to low socket buffer"), opt_number },
-     { "TCPDSACKOldSent", N_("%u DSACKs sent for old packets"), opt_number },
-     { "TCPDSACKOfoSent", N_("%u DSACKs sent for out of order packets"), opt_number },
-     { "TCPDSACKRecv", N_("%u DSACKs received"), opt_number },
-     { "TCPDSACKOfoRecv", N_("%u DSACKs for out of order packets received"), opt_number },
-     { "TCPAbortOnSyn", N_("%u connections reset due to unexpected SYN"), opt_number },
-     { "TCPAbortOnData", N_("%u connections reset due to unexpected data"), opt_number },
-     { "TCPAbortOnClose", N_("%u connections reset due to early user close"), opt_number },
-     { "TCPAbortOnMemory", N_("%u connections aborted due to memory pressure"), opt_number },
-     { "TCPAbortOnTimeout", N_("%u connections aborted due to timeout"), opt_number },
-     { "TCPAbortOnLinger", N_("%u connections aborted after user close in linger timeout"), opt_number },
-     { "TCPAbortFailed", N_("%u times unable to send RST due to no memory"), opt_number }, 
-     { "TCPMemoryPressures", N_("TCP ran low on memory %u times"), opt_number }, 
-     { "TCPLoss", N_("%u TCP data loss events") },
+     { "TCPPureAcks", N_("%llu acknowledgments not containing data received"), opt_number },
+     { "TCPHPAcks", N_("%llu predicted acknowledgments"), opt_number },
+     { "TCPRenoRecovery", N_("%llu times recovered from packet loss due to fast retransmit"), opt_number },
+     { "TCPSackRecovery", N_("%llu times recovered from packet loss due to SACK data"), opt_number },
+     { "TCPSACKReneging", N_("%llu bad SACKs received"), opt_number },
+     { "TCPFACKReorder", N_("Detected reordering %llu times using FACK"), opt_number },
+     { "TCPSACKReorder", N_("Detected reordering %llu times using SACK"), opt_number },
+     { "TCPTSReorder", N_("Detected reordering %llu times using time stamp"), opt_number },
+     { "TCPRenoReorder", N_("Detected reordering %llu times using reno fast retransmit"), opt_number },
+     { "TCPFullUndo", N_("%llu congestion windows fully recovered"), opt_number },
+     { "TCPPartialUndo", N_("%llu congestion windows partially recovered using Hoe heuristic"), opt_number },
+     { "TCPDSackUndo", N_("%llu congestion window recovered using DSACK"), opt_number },
+     { "TCPLossUndo", N_("%llu congestion windows recovered after partial ack"), opt_number },
+     { "TCPLostRetransmits", N_("%llu retransmits lost"), opt_number },
+     { "TCPRenoFailures",  N_("%llu timeouts after reno fast retransmit"), opt_number },
+     { "TCPSackFailures",  N_("%llu timeouts after SACK recovery"), opt_number },
+     { "TCPLossFailures",  N_("%llu timeouts in loss state"), opt_number },
+     { "TCPFastRetrans", N_("%llu fast retransmits"), opt_number },
+     { "TCPForwardRetrans", N_("%llu forward retransmits"), opt_number },
+     { "TCPSlowStartRetrans", N_("%llu retransmits in slow start"), opt_number },
+     { "TCPTimeouts", N_("%llu other TCP timeouts"), opt_number },
+     { "TCPRenoRecoveryFailed", N_("%llu reno fast retransmits failed"), opt_number },
+     { "TCPSackRecoveryFail", N_("%llu sack retransmits failed"), opt_number },
+     { "TCPSchedulerFailed", N_("%llu times receiver scheduled too late for direct processing"), opt_number },
+     { "TCPRcvCollapsed", N_("%llu packets collapsed in receive queue due to low socket buffer"), opt_number },
+     { "TCPDSACKOldSent", N_("%llu DSACKs sent for old packets"), opt_number },
+     { "TCPDSACKOfoSent", N_("%llu DSACKs sent for out of order packets"), opt_number },
+     { "TCPDSACKRecv", N_("%llu DSACKs received"), opt_number },
+     { "TCPDSACKOfoRecv", N_("%llu DSACKs for out of order packets received"), opt_number },
+     { "TCPAbortOnSyn", N_("%llu connections reset due to unexpected SYN"), opt_number },
+     { "TCPAbortOnData", N_("%llu connections reset due to unexpected data"), opt_number },
+     { "TCPAbortOnClose", N_("%llu connections reset due to early user close"), opt_number },
+     { "TCPAbortOnMemory", N_("%llu connections aborted due to memory pressure"), opt_number },
+     { "TCPAbortOnTimeout", N_("%llu connections aborted due to timeout"), opt_number },
+     { "TCPAbortOnLinger", N_("%llu connections aborted after user close in linger timeout"), opt_number },
+     { "TCPAbortFailed", N_("%llu times unable to send RST due to no memory"), opt_number },
+     { "TCPMemoryPressures", N_("TCP ran low on memory %llu times"), opt_number },
+     { "TCPLoss", N_("%llu TCP data loss events") },
 };
 
 struct entry Sctptab[] =
 {
-    {"SctpCurrEstab", N_("%u Current Associations"), number},
-    {"SctpActiveEstabs", N_("%u Active Associations"), number},
-    {"SctpPassiveEstabs", N_("%u Passive Associations"), number},
-    {"SctpAborteds", N_("%u Number of Aborteds "), number},
-    {"SctpShutdowns", N_("%u Number of Graceful Terminations"), number},
-    {"SctpOutOfBlues", N_("%u Number of Out of Blue packets"), number},
-    {"SctpChecksumErrors", N_("%u Number of Packets with invalid Checksum"), number},
-    {"SctpOutCtrlChunks", N_("%u Number of control chunks sent"), number},
-    {"SctpOutOrderChunks", N_("%u Number of ordered chunks sent"), number},
-    {"SctpOutUnorderChunks", N_("%u Number of Unordered chunks sent"), number},
-    {"SctpInCtrlChunks", N_("%u Number of control chunks received"), number},
-    {"SctpInOrderChunks", N_("%u Number of ordered chunks received"), number},
-    {"SctpInUnorderChunks", N_("%u Number of Unordered chunks received"), number},
-    {"SctpFragUsrMsgs", N_("%u Number of messages fragmented"), number},
-    {"SctpReasmUsrMsgs", N_("%u Number of messages reassembled "), number},
-    {"SctpOutSCTPPacks", N_("%u Number of SCTP packets sent"), number},
-    {"SctpInSCTPPacks", N_("%u Number of SCTP packets received"), number},
+    {"SctpCurrEstab", N_("%llu Current Associations"), number},
+    {"SctpActiveEstabs", N_("%llu Active Associations"), number},
+    {"SctpPassiveEstabs", N_("%llu Passive Associations"), number},
+    {"SctpAborteds", N_("%llu Number of Aborteds "), number},
+    {"SctpShutdowns", N_("%llu Number of Graceful Terminations"), number},
+    {"SctpOutOfBlues", N_("%llu Number of Out of Blue packets"), number},
+    {"SctpChecksumErrors", N_("%llu Number of Packets with invalid Checksum"), number},
+    {"SctpOutCtrlChunks", N_("%llu Number of control chunks sent"), number},
+    {"SctpOutOrderChunks", N_("%llu Number of ordered chunks sent"), number},
+    {"SctpOutUnorderChunks", N_("%llu Number of Unordered chunks sent"), number},
+    {"SctpInCtrlChunks", N_("%llu Number of control chunks received"), number},
+    {"SctpInOrderChunks", N_("%llu Number of ordered chunks received"), number},
+    {"SctpInUnorderChunks", N_("%llu Number of Unordered chunks received"), number},
+    {"SctpFragUsrMsgs", N_("%llu Number of messages fragmented"), number},
+    {"SctpReasmUsrMsgs", N_("%llu Number of messages reassembled "), number},
+    {"SctpOutSCTPPacks", N_("%llu Number of SCTP packets sent"), number},
+    {"SctpInSCTPPacks", N_("%llu Number of SCTP packets received"), number},
 };
 
 struct tabtab {
@@ -271,7 +271,7 @@ int cmpentries(const void *a, const void
     return strcmp(((struct entry *) a)->title, ((struct entry *) b)->title);
 }
 
-void printval(struct tabtab *tab, char *title, int val)
+void printval(struct tabtab *tab, char *title, unsigned long long val)
 {
     struct entry *ent = NULL, key;
     int type;
@@ -283,7 +283,7 @@ void printval(struct tabtab *tab, char *
 			  sizeof(struct entry), cmpentries);
     if (!ent) {			/* try our best */
 	if (val) 
-		printf("%*s%s: %d\n", states[state].indent, "", title, val);
+		printf("%*s%s: %llu\n", states[state].indent, "", title, val);
 	return;
     }
     type = ent->type;
@@ -390,7 +390,7 @@ void process_fd(FILE *f,int file_desc)  
 	    *p = '\0';
 
 	    if (*sp != '\0' && *(tab->flag)) 	
-		printval(tab, sp, strtoul(np, &np, 10));
+		printval(tab, sp, strtoull(np, &np, 10));
 
 	    sp = p + 1;
 	}
@@ -426,7 +426,7 @@ void process_fd2(FILE *f, const char *fi
 	sp += strspn(sp, " \t\n"); 
 
 	if (*sp != '\0' && *(tab->flag)) 	
-	    printval(tab, buf1, strtoul(sp, 0, 10));
+	    printval(tab, buf1, strtoull(sp, 0, 10));
     }
   return;
   
